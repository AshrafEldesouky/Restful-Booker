{
	"info": {
		"_postman_id": "9516f68d-af0c-489e-8c5a-f2fe50294636",
		"name": "RestFull_Booker_Collection_APiTesting",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "7026690",
		"_collection_link": "https://martian-desert-966528.postman.co/workspace/Restful_Booker_Workspace~96818ea7-62c1-4eb3-ab61-d736d2787dfd/collection/7026690-9516f68d-af0c-489e-8c5a-f2fe50294636?action=share&source=collection_link&creator=7026690"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "1 - CreateToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// console.log( pm.request.jsonBody.username)\r",
									"// console.log( pm.request.jsonBody.password)\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"TokenNumber\",JSON.parse(responseBody).token)\r",
									"console.log(pm.collectionVariables.get(\"TokenNumber\"))\r",
									"\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"//7.Check all response values have expected data type\r",
									"//8.Check The values as expected \r",
									"//9. Business test case :Check length of all attributes at Response body not less than 5 digit\r",
									"//10-Request Header Test Cases\r",
									"//11-Response Header Test Cases:\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"\r",
									"//***********************************************************************************************************/\r",
									"\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Auth_CreateToken_PostRequest]: Check Status code of Post request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Auth_CreateToken_PostRequest]: Check Status message of Post request is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"console.log(typeof pm.response.json());\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[Auth_CreateToken_PostRequest]: Check if response Body is an object not array\", function () {\r",
									"    pm.expect(typeof pm.response.json()).to.equal(\"object\")\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//4-First Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"4.[Auth_CreateToken_PostRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"token\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"// because the object and array contain properties\r",
									"pm.test(\"5.[Auth_CreateToken_PostRequest]: Check The token property Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).token).to.not.equal(null)\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"6.[langauges_Get_Languages_Request]: Check the response has token attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).token).to.not.be.undefined;\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"7.[Auth_CreateToken_PostRequest]: Check the response datatype of the Response is object \", function () {\r",
									"    // console.log(typeof JSON.parse(responseBody).id)\r",
									"    pm.expect(typeof JSON.parse(responseBody)).to.equal(\"object\")\r",
									"})\r",
									"pm.test(\"8.[Auth_CreateToken_PostRequest]: Check the response datatype of the  token is string \", function () {\r",
									"    // console.log(typeof JSON.parse(responseBody).id)\r",
									"    pm.expect(typeof JSON.parse(responseBody).token).to.equal(\"string\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"// pm.test(\"31.Check the response value of ID has value as expected\", function () {\r",
									"//     console.log(JSON.parse(responseBody).id)\r",
									"//     pm.expect(JSON.parse(request.data).id).to.equal(JSON.parse(responseBody).id)\r",
									"// })\r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-Check length of all attributes at Response body not less than 5 digit\r",
									"//************************************************************************************************************/\r",
									"// 10-Header Request test cases\r",
									"//************************************************************************************************************/\r",
									"// 11-Header Response test cases\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomUsername() {\r",
									"    const characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"    const randomIndex = Math.floor(Math.random() * characters.length);\r",
									"    const randomCharacter = characters[randomIndex];\r",
									"    let username = randomCharacter;\r",
									"    const randomLength = Math.floor(Math.random() * 7) + 6;\r",
									"    for (let i = 1; i < randomLength; i++) {\r",
									"        username += characters[Math.floor(Math.random() * characters.length)];\r",
									"    }\r",
									"    return username;\r",
									"}\r",
									"pm.collectionVariables.set(\"username_random\", generateRandomUsername());\r",
									"\r",
									"console.log(pm.collectionVariables.get(\"username_random\"));\r",
									"// Access the username_random variable and log it\r",
									"const generatedUsername = pm.collectionVariables.get(\"username_random\");\r",
									"console.log(\"Generated Username:\", generatedUsername);\r",
									"//*********************************/\r",
									"\r",
									"function generateRandomPassword(length = 12, characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()\") {\r",
									"    let password = \"\";\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
									"        password += characters[randomIndex];\r",
									"    }\r",
									"    return password;\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"password_random\", generateRandomPassword());\r",
									"console.log(pm.collectionVariables.get(\"password_random\"));\r",
									"const generatedPassword = pm.collectionVariables.get(\"password_random\");\r",
									"console.log(\"Generated Password:\", generatedPassword);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    // \"username\" : {{generatedUsername}},\r\n    // \"password\" : {{generatedPassword}}\r\n\r\n    // \"username\": \"{{generatedUsername}}\",\r\n    // \"password\": \"{{generatedPassword}}\"\r\n\r\n    \"username\": \"admin\",\r\n    \"password\": \"password123\"\r\n}"
						},
						"url": "{{baseurl}}/auth"
					},
					"response": []
				}
			]
		},
		{
			"name": "Booking",
			"item": [
				{
					"name": "4 - CreateBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"//7.Check all response values have expected data type\r",
									"//8.Check The values as expected \r",
									"//9. Business test case :Check length of all attributes at Response body not less than 5 digit\r",
									"//10-Request Header Test Cases\r",
									"//11-Response Header Test Cases:\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"\r",
									"//***********************************************************************************************************/\r",
									"pm.collectionVariables.set('Bookingid', JSON.parse(responseBody).bookingid);\r",
									"pm.collectionVariables.set('FirstName', JSON.parse(responseBody).booking.firstname);\r",
									"pm.collectionVariables.set('LirstName', JSON.parse(responseBody).booking.lastname);\r",
									"pm.collectionVariables.set('checkin', JSON.parse(responseBody).booking.bookingdates.checkin);\r",
									"pm.collectionVariables.set('checkout', JSON.parse(responseBody).booking.bookingdates.checkout);\r",
									"\r",
									"// console.log(JSON.parse(responseBody).booking.bookingdates.checkin)\r",
									"// console.log(JSON.parse(responseBody).booking.bookingdates.checkout)\r",
									"console.log(pm.collectionVariables.get(\"checkin\"))\r",
									"console.log(pm.collectionVariables.get(\"checkout\"))\r",
									"//***********************************************************************************************************/\r",
									"\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Booking_CreateBooking_PostRequest]: Check Status code of  of the response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Booking_CreateBooking_PostRequest]: Check Status message of of the response is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[Booking_CreateBooking_PostRequest]: Check if response Body is an object not array\", function () {\r",
									"    pm.expect(typeof pm.response.json()).to.equal(\"object\")\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//4-First Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"4.[Booking_CreateBooking_PostRequest]: Check response schema has property bookingid\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"bookingid\")\r",
									"})\r",
									"pm.test(\"5.[Booking_CreateBooking_PostRequest]: Check response schema has property booking\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"booking\")\r",
									"})\r",
									"pm.test(\"6.[Booking_CreateBooking_PostRequest]: Check response schema has property firstname\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).booking).to.have.property(\"firstname\")\r",
									"})\r",
									"pm.test(\"7.[Booking_CreateBooking_PostRequest]: Check response schema has property lastname\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).booking).to.have.property(\"lastname\")\r",
									"})\r",
									"pm.test(\"8.[Booking_CreateBooking_PostRequest]: Check response schema has property totalprice\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).booking).to.have.property(\"totalprice\")\r",
									"})\r",
									"pm.test(\"9.[Booking_CreateBooking_PostRequest]: Check response schema has property depositpaid\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).booking).to.have.property(\"depositpaid\")\r",
									"})\r",
									"pm.test(\"10.[Booking_CreateBooking_PostRequest]: Check response schema has property booking.bookingdates\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).booking).to.have.property(\"bookingdates\")\r",
									"})\r",
									"pm.test(\"11.[Booking_CreateBooking_PostRequest]: Check response schema has property booking.checkin\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).booking.bookingdates).to.have.property(\"checkin\")\r",
									"})\r",
									"pm.test(\"12.[Booking_CreateBooking_PostRequest]: Check response schema has property booking.checkout\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).booking.bookingdates).to.have.property(\"checkout\")\r",
									"})\r",
									"pm.test(\"13.[Booking_CreateBooking_PostRequest]: Check response schema has property booking.additionalneeds\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).booking).to.have.property(\"additionalneeds\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"// because the object and array contain properties\r",
									"pm.test(\"14.[Booking_CreateBooking_PostRequest]: Check the bookingid key at the Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingid).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"15.[Booking_CreateBooking_PostRequest]: Check the booking key at the Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).booking).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"17.[Booking_CreateBooking_PostRequest]: Check the booking.firstname key at the Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).booking.firstname).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"18.[Booking_CreateBooking_PostRequest]: Check the booking.lastname key at Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).booking.lastname).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"19.[Booking_CreateBooking_PostRequest]: Check the booking.totalprice at the Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).booking.totalprice).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"20.[Booking_CreateBooking_PostRequest]: Check the booking.depositpaid at the Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).booking.depositpaid).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"21.[Booking_CreateBooking_PostRequest]: Check the booking.bookingdates at the Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).booking.bookingdates).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"22.[Booking_CreateBooking_PostRequest]: Check the booking.bookingdates at the Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).booking.bookingdates).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"23.[Booking_CreateBooking_PostRequest]: Check the booking.bookingdates.checkout at the Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).booking.bookingdates.checkin).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"24.[Booking_CreateBooking_PostRequest]: Check the booking.bookingdates.checkout in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).booking.bookingdates.checkout).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"25.[Booking_CreateBooking_PostRequest]: Check the booking.additionalneeds at the Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).booking.additionalneeds).to.not.equal(null)\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"26.[Booking_CreateBooking_PostRequest]: Check the bookingid at the Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingid).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"28.[Booking_CreateBooking_PostRequest]:  Check the booking at Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).booking).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"29.[Booking_CreateBooking_PostRequest]:  Check the booking.firstname at  Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).booking.firstname).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"30.[Booking_CreateBooking_PostRequest]: Check the booking.lastname at Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).booking.lastname).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"31.[Booking_CreateBooking_PostRequest]: Check the booking.totalprice at Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).booking.totalprice).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"32.[Booking_CreateBooking_PostRequest]: Check the booking.depositpaid at Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).booking.depositpaid).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"33.[Booking_CreateBooking_PostRequest]: Check the booking.bookingdates Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).booking.bookingdates).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"35.[Booking_CreateBooking_PostRequest]: Check the booking.bookingdates.checkin at the Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).booking.bookingdates.checkin).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"36.[Booking_CreateBooking_PostRequest]: Check the booking.bookingdates.checkout at the Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).booking.bookingdates.checkout).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"37.[Booking_CreateBooking_PostRequest]: Check the booking.additionalneed at the Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).booking.additionalneeds).to.not.be.undefined;\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"38.[Booking_CreateBooking_PostRequest]: Check the bookingid at the Response has value is not equal null\", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).bookingid).to.equal(\"number\")\r",
									"})\r",
									"pm.test(\"39.[Booking_CreateBooking_PostRequest]: Check the booking at the Response has value is not equal null\", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).booking).to.equal(\"object\")\r",
									"})\r",
									"pm.test(\"40.[Booking_CreateBooking_PostRequest]: Check the booking.firstname at the Response has value is not equal null\", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).booking.firstname).to.equal(\"string\")\r",
									"})\r",
									"pm.test(\"41.[Booking_CreateBooking_PostRequest]: Check the booking.lastname at the Response has value is not equal null\", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).booking.lastname).to.equal(\"string\")\r",
									"})\r",
									"pm.test(\"42.[Booking_CreateBooking_PostRequest]: Check the booking.totalprice at the Response has value is not equal null\", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).booking.totalprice).to.equal(\"number\")\r",
									"})\r",
									"pm.test(\"43.[Booking_CreateBooking_PostRequest]: Check the booking.depositpaid at the Response has value is not equal null\", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).booking.depositpaid).to.equal(\"boolean\")\r",
									"})\r",
									"pm.test(\"44.[Booking_CreateBooking_PostRequest]: Check the ooking.bookingdates at the Response has value is not equal null\", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).booking.bookingdates).to.equal(\"object\")\r",
									"})\r",
									"pm.test(\"45.[Booking_CreateBooking_PostRequest]: Check the booking.bookingdates.checkin at the Response has value is not equal null\", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).booking.bookingdates.checkin).to.equal(\"string\")\r",
									"})\r",
									"pm.test(\"46.[Booking_CreateBooking_PostRequest]: Check the booking.bookingdates.checkout at the Response has value is not equal null\", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).booking.bookingdates.checkout).to.equal(\"string\")\r",
									"})\r",
									"pm.test(\"47.[Booking_CreateBooking_PostRequest]: Check the booking.additionalneeds at the Response has value is not equal null\", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).booking.additionalneeds).to.equal(\"string\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"// pm.test(\"31.Check the response value of ID has value as expected\", function () {\r",
									"//     console.log(JSON.parse(responseBody).id)\r",
									"//     pm.expect(JSON.parse(request.data).id).to.equal(JSON.parse(responseBody).id)\r",
									"// })\r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-Check length of all attributes at Response body not less than 5 digit\r",
									"//************************************************************************************************************/\r",
									"// 10-Header Request test cases\r",
									"//************************************************************************************************************/\r",
									"// 11-Header Response test cases\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateTotalPrice() {\r",
									"  // Generate a random number between 100 and 1000\r",
									"  const price = Math.floor(Math.random() * 1000) + 100;\r",
									"  // Return the total price\r",
									"  return price;\r",
									"}\r",
									"const totalPrice = generateTotalPrice();\r",
									"console.log(generateTotalPrice())\r",
									"pm.collectionVariables.set(\"checkin\",generateTotalPrice())\r",
									"\r",
									"//******************************************** */\r",
									"// generate random only one check-in date and only one checkout data with format 2018-01-01  and make sure that check out date is greater than check-in date JavaScript\r",
									"// Generate a random check-in date between 2018-01-01 and 2023-10-01\r",
									"// const checkInDate = new Date(+(new Date('2018-01-01')) + Math.floor(Math.random() * (new Date('2023-10-01') - new Date('2018-01-01'))));\r",
									"// // Generate a random number of days to add to the check-in date (ensuring at least one day stay)\r",
									"// const numberOfDays = Math.floor(Math.random() * 10) + 1;\r",
									"// // Calculate the check-out date by adding the random number of days to check-in date\r",
									"// const checkOutDate = new Date(checkInDate);\r",
									"// checkOutDate.setDate(checkOutDate.getDate() + numberOfDays);\r",
									"// // Format dates as 'YYYY-MM-DD'\r",
									"// const formatDate = (date) => {\r",
									"//     const year = date.getFullYear();\r",
									"//     const month = String(date.getMonth() + 1).padStart(2, '0');\r",
									"//     const day = String(date.getDate()).padStart(2, '0');\r",
									"//     return `${year}-${month}-${day}`;\r",
									"// };\r",
									"// // Set the generated dates as environment variables\r",
									"// pm.environment.set('checkInDate', formatDate(checkInDate));\r",
									"// pm.environment.set('checkOutDate', formatDate(checkOutDate));\r",
									"// // Log the generated dates to the console\r",
									"// console.log('Check-in Date:', formatDate(checkInDate));\r",
									"// console.log('Check-out Date:', formatDate(checkOutDate));\r",
									"\r",
									"//--------------------------------Check in date and check-out date bew -----------------------------------------------//\r",
									"// Generate a random check-in date and check-out date between January 1, 1990, and December 31, 1990 \r",
									"const checkInDate = new Date('1990-01-01');\r",
									"const endOfYear = new Date('1990-12-31');\r",
									"const randomNumberOfDays = Math.floor(Math.random() * ((endOfYear - checkInDate) / (1000 * 60 * 60 * 24))) + 1;\r",
									"checkInDate.setDate(checkInDate.getDate() + randomNumberOfDays);\r",
									"// Generate a random number of days to stay (at least one day)\r",
									"const numberOfDays = Math.floor(Math.random() * 10) + 1;\r",
									"// Calculate the check-out date by adding the random number of days to check-in date\r",
									"const checkOutDate = new Date(checkInDate);\r",
									"checkOutDate.setDate(checkOutDate.getDate() + numberOfDays);\r",
									"// Format dates as 'YYYY-MM-DD'\r",
									"const formatDate = (date) => {\r",
									"    const year = date.getFullYear();\r",
									"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
									"    const day = String(date.getDate()).padStart(2, '0');\r",
									"    return `${year}-${month}-${day}`;\r",
									"};\r",
									"// Set the generated dates as environment variables\r",
									"pm.environment.set('checkInDate', formatDate(checkInDate));\r",
									"pm.environment.set('checkOutDate', formatDate(checkOutDate));\r",
									"\r",
									"// Log the generated dates to the console\r",
									"console.log('Check-in Date:', formatDate(checkInDate));\r",
									"console.log('Check-out Date:', formatDate(checkOutDate));\r",
									"\r",
									"//******************************************************************* */\r",
									"const depositpaid_TrueOrFalse = [\"true\", \"false\"];\r",
									"function getRandomBoolean() {\r",
									"  return depositpaid_TrueOrFalse[Math.floor(Math.random() * depositpaid_TrueOrFalse.length)];\r",
									"}\r",
									"pm.collectionVariables.set(\"depositpaid\",getRandomBoolean())\r",
									"console.log(pm.collectionVariables.get(\"depositpaid\")); \r",
									"//******************************************************************* */\r",
									"const additionalneeds_threemeals = [\"Breakfast\", \"Launch\" , \"Dinner\"];\r",
									"function getRandomBmeels() {\r",
									"  return additionalneeds_threemeals[Math.floor(Math.random() * additionalneeds_threemeals.length)];\r",
									"}\r",
									"pm.collectionVariables.set(\"additionalneeds_meels\",getRandomBmeels())\r",
									"console.log(pm.collectionVariables.get(\"additionalneeds_meels\")); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"{{$randomFirstName}}\",\r\n    \"lastname\" : \"{{$randomLastName}}\",\r\n    \"totalprice\" : {{totalPrice}},\r\n    \"depositpaid\" : {{depositpaid}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkInDate}}\",\r\n        \"checkout\" : \"{{checkOutDate}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalneeds_meels}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/booking"
					},
					"response": []
				},
				{
					"name": "1 - Get_ALL_BookingIds",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"//7.Check all response values have expected data type\r",
									"//8.Check The values as expected \r",
									"//9. Business test case :Check length of all attributes at Response body not less than 5 digit\r",
									"//10-Request Header Test Cases\r",
									"//11-Response Header Test Cases:\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"\r",
									"//***********************************************************************************************************/\r",
									"//***********************************************************************************************************/\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Booking_Get_ALL_BookingIds_GetRequest]: Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Booking_Get_ALL_BookingIds_GetRequest]: Check Status message of the response is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[Booking_Get_ALL_BookingIds_GetRequest]: Check if response Body is an object not array\", function () {\r",
									"    pm.expect(typeof pm.response.json()).to.equal(\"object\")\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//4-First Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"4.[Booking_Get_ALL_BookingIds_GetRequest]: Check response schema has property bookingid\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++)\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"bookingid\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"// because the object and array contain properties\r",
									"pm.test(\"5.[Booking_Get_ALL_BookingIds_GetRequest]: Check the Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++)\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"5.[Booking_Get_ALL_BookingIds_GetRequest]: Check the Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++)\r",
									"        pm.expect(JSON.parse(responseBody)[i].bookingid).to.not.equal(null)\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"6.[Booking_Get_ALL_BookingIds_GetRequest]: Check the Response is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++)\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"6.[Booking_Get_ALL_BookingIds_GetRequest]: Check language array in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++)\r",
									"        pm.expect(JSON.parse(responseBody)[i].bookingid).to.not.be.undefined;\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"7.[Booking_Get_ALL_BookingIds_GetRequest]: Check the bookingid key at the Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++)\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i]).to.equal(\"object\")\r",
									"})\r",
									"// console.log(\"typeof JSON.parse(responseBody)[i].bookingid : \"+typeof JSON.parse(responseBody)[0].bookingid)\r",
									"pm.test(\"7.[Booking_Get_ALL_BookingIds_GetRequest]: Check the bookingid key at the Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++)\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].bookingid).to.equal(\"number\")\r",
									"        \r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"// pm.test(\"31.Check the response value of ID has value as expected\", function () {\r",
									"//     console.log(JSON.parse(responseBody).id)\r",
									"//     pm.expect(JSON.parse(request.data).id).to.equal(JSON.parse(responseBody).id)\r",
									"// })\r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-Check length of all attributes at Response body not less than 5 digit\r",
									"//************************************************************************************************************/\r",
									"// 10-Header Request test cases\r",
									"//************************************************************************************************************/\r",
									"// 11-Header Response test cases\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{baseurl}}/booking"
					},
					"response": []
				},
				{
					"name": "2 - Get BookingID_ByName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"//7.Check all response values have expected data type\r",
									"//8.Check The values as expected \r",
									"//9. Business test case :Check length of all attributes at Response body not less than 5 digit\r",
									"//10-Request Header Test Cases\r",
									"//11-Response Header Test Cases:\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"\r",
									"//***********************************************************************************************************/\r",
									"//***********************************************************************************************************/\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Booking_GetBookingID_ByName_GetRequest]Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Booking_GetBookingID_ByName_GetRequest]: Check Status message of the response is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[Booking_GetBookingID_ByName_GetRequest]: Check if response Body is an object not array\", function () {\r",
									"    pm.expect(typeof pm.response.json()).to.equal(\"object\")\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//4-First Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"4.[Booking_GetBookingID_ByName_GetRequest]: Check response schema has bookingid token\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++)\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"bookingid\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"// because the object and array contain properties\r",
									"pm.test(\"13.[Booking_GetBookingID_ByName_GetRequest]: Check Response is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++)\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"13.[Booking_GetBookingID_ByName_GetRequest]: Check the bookingid key at the Response is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++)\r",
									"        pm.expect(JSON.parse(responseBody)[i].bookingid).to.not.equal(null)\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"13.[Booking_GetBookingID_ByName_GetRequest]: Check the Response is undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++)\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"13.[Booking_GetBookingID_ByName_GetRequest]: Check the bookingid at the Response is undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++)\r",
									"        pm.expect(JSON.parse(responseBody)[i].bookingid).to.not.be.undefined;\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"13.[Booking_GetBookingID_ByName_GetRequest]: Check the Response is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++)\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i]).to.equal(\"object\")\r",
									"})\r",
									"pm.test(\"13.[Booking_GetBookingID_ByName_GetRequest]: Check the bookingid at the  Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++)\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].bookingid).to.equal(\"object\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"// pm.test(\"31.Check the response value of ID has value as expected\", function () {\r",
									"//     console.log(JSON.parse(responseBody).id)\r",
									"//     pm.expect(JSON.parse(request.data).id).to.equal(JSON.parse(responseBody).id)\r",
									"// })\r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-Check length of all attributes at Response body not less than 5 digit\r",
									"//************************************************************************************************************/\r",
									"// 10-Header Request test cases\r",
									"//************************************************************************************************************/\r",
									"// 11-Header Response test cases\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/booking?firstname={{FirstName}}&lastname={{LirstName}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "firstname",
									"value": "{{FirstName}}"
								},
								{
									"key": "lastname",
									"value": "{{LirstName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "3 - Get BookingIDby_Checkout",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/booking?checkin={{checkin}}&checkout={{checkout}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "checkin",
									"value": "{{checkin}}"
								},
								{
									"key": "checkout",
									"value": "{{checkout}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4 - Get Booking By oneID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"//7.Check all response values have expected data type\r",
									"//8.Check The values as expected \r",
									"//9. Business test case :Check length of all attributes at Response body not less than 5 digit\r",
									"//10-Request Header Test Cases\r",
									"//11-Response Header Test Cases:\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"\r",
									"//***********************************************************************************************************/\r",
									"\r",
									"//***********************************************************************************************************/\r",
									"\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Booking_GetBookingID_ByName_GetRequest]: Check Status code of get langauge request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Booking_GetBookingID_ByName_GetRequest]: Check Status message of get langauge request is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[Booking_GetBookingID_ByName_GetRequest]: Check if response Body is an object not array\", function () {\r",
									"    pm.expect(typeof pm.response.json()).to.equal(\"object\")\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//4-First Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"4.[Booking_GetBookingID_ByName_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"firstname\")\r",
									"})\r",
									"pm.test(\"5.[Booking_GetBookingID_ByName_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"lastname\")\r",
									"})\r",
									"pm.test(\"6.[Booking_GetBookingID_ByName_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"totalprice\")\r",
									"})\r",
									"pm.test(\"7.[Booking_GetBookingID_ByName_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"depositpaid\")\r",
									"})\r",
									"pm.test(\"9.[Booking_GetBookingID_ByName_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"bookingdates\")\r",
									"})\r",
									"pm.test(\"10.[Booking_GetBookingID_ByName_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates).to.have.property(\"checkin\")\r",
									"})\r",
									"pm.test(\"11.[Booking_GetBookingID_ByName_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates).to.have.property(\"checkout\")\r",
									"})\r",
									"pm.test(\"12.[Booking_GetBookingID_ByName_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"additionalneeds\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"// because the object and array contain properties\r",
									"\r",
									"pm.test(\"13.[Booking_GetBookingID_ByName_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).firstname).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"14.[Booking_GetBookingID_ByName_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).lastname).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"15.[Booking_GetBookingID_ByName_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).totalprice).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"16.[langauges_Get_Languages_Request]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).depositpaid).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"17.[Booking_GetBookingID_ByName_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingid).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"18.[Booking_GetBookingID_ByName_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"19.[Booking_GetBookingID_ByName_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates.checkin).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"20.[Booking_GetBookingID_ByName_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates.checkout).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"21.[Booking_GetBookingID_ByName_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).additionalneeds).to.not.equal(null)\r",
									"})\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"22.[Booking_GetBookingID_ByName_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).firstname).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"23.[Booking_GetBookingID_ByName_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).lastname).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"24.[Booking_GetBookingID_ByName_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).totalprice).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"25.[Booking_GetBookingID_ByName_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).depositpaid).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"27.[Booking_GetBookingID_ByName_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"28.[Booking_GetBookingID_ByName_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates.checkin).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"29.[Booking_GetBookingID_ByName_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates.checkout).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"30.[Booking_GetBookingID_ByName_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).additionalneeds).to.not.be.undefined;\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"\r",
									"\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"// pm.test(\"31.Check the response value of ID has value as expected\", function () {\r",
									"//     console.log(JSON.parse(responseBody).id)\r",
									"//     pm.expect(JSON.parse(request.data).id).to.equal(JSON.parse(responseBody).id)\r",
									"// })\r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-Check length of all attributes at Response body not less than 5 digit\r",
									"//************************************************************************************************************/\r",
									"// 10-Header Request test cases\r",
									"//************************************************************************************************************/\r",
									"// 11-Header Response test cases\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseurl}}/booking/{{Bookingid}}"
					},
					"response": []
				},
				{
					"name": "5 - UpdateBooking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key: 'Cookie',\r",
									"    value: 'token= ' + pm.collectionVariables.get('TokenNumber')\r",
									"    // value: 'token= 06cadcf2b90101e'\r",
									"});\r",
									"console.log(pm.collectionVariables.get('TokenNumber'))\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"//7.Check all response values have expected data type\r",
									"//8.Check The values as expected \r",
									"//9. Business test case :Check length of all attributes at Response body not less than 5 digit\r",
									"//10-Request Header Test Cases\r",
									"//11-Response Header Test Cases:\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"\r",
									"//***********************************************************************************************************/\r",
									"\r",
									"//***********************************************************************************************************/\r",
									"\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Booking_UpdateBooking_PutRequest]: Check Status code of get langauge request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Booking_UpdateBooking_PutRequest]: Check Status message of get langauge request is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[Booking_UpdateBooking_PutRequest]: Check if response Body is an object not array\", function () {\r",
									"    pm.expect(typeof pm.response.json()).to.equal(\"object\")\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//4-First Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"4.[Booking_UpdateBooking_PutRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"firstname\")\r",
									"})\r",
									"pm.test(\"5.[Booking_UpdateBooking_PutRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"lastname\")\r",
									"})\r",
									"pm.test(\"6.[Booking_UpdateBooking_PutRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"totalprice\")\r",
									"})\r",
									"pm.test(\"7.[Booking_UpdateBooking_PutRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"depositpaid\")\r",
									"})\r",
									"\r",
									"pm.test(\"9.[Booking_UpdateBooking_PutRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"bookingdates\")\r",
									"})\r",
									"pm.test(\"10.[Booking_UpdateBooking_PutRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates).to.have.property(\"checkin\")\r",
									"})\r",
									"pm.test(\"11.[Booking_UpdateBooking_PutRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates).to.have.property(\"checkout\")\r",
									"})\r",
									"pm.test(\"12.[Booking_UpdateBooking_PutRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"additionalneeds\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"// because the object and array contain properties\r",
									"\r",
									"pm.test(\"13.[Booking_UpdateBooking_PutRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).firstname).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"14.[Booking_UpdateBooking_PutRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).lastname).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"15.[Booking_UpdateBooking_PutRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).totalprice).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"16.[Booking_UpdateBooking_PutRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).depositpaid).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"17.[Booking_UpdateBooking_PutRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingid).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"18.[Booking_UpdateBooking_PutRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"19.[Booking_UpdateBooking_PutRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates.checkin).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"20.[Booking_UpdateBooking_PutRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates.checkout).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"21.[Booking_UpdateBooking_PutRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).additionalneeds).to.not.equal(null)\r",
									"})\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"22.[Booking_UpdateBooking_PutRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).firstname).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"23.[Booking_UpdateBooking_PutRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).lastname).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"24.[Booking_UpdateBooking_PutRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).totalprice).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"25.[Booking_UpdateBooking_PutRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).depositpaid).to.not.be.undefined;\r",
									"})\r",
									"\r",
									"pm.test(\"27.[Booking_UpdateBooking_PutRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"28.[Booking_UpdateBooking_PutRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates.checkin).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"29.[Booking_UpdateBooking_PutRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates.checkout).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"30.[Booking_UpdateBooking_PutRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).additionalneeds).to.not.be.undefined;\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"\r",
									"\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"// pm.test(\"31.Check the response value of ID has value as expected\", function () {\r",
									"//     console.log(JSON.parse(responseBody).id)\r",
									"//     pm.expect(JSON.parse(request.data).id).to.equal(JSON.parse(responseBody).id)\r",
									"// })\r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-Check length of all attributes at Response body not less than 5 digit\r",
									"//************************************************************************************************************/\r",
									"// 10-Header Request test cases\r",
									"//************************************************************************************************************/\r",
									"// 11-Header Response test cases\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/booking/{{Bookingid}}"
					},
					"response": []
				},
				{
					"name": "6 - Check Put_Update successfull",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"//7.Check all response values have expected data type\r",
									"//8.Check The values as expected \r",
									"//9. Business test case :Check length of all attributes at Response body not less than 5 digit\r",
									"//10-Request Header Test Cases\r",
									"//11-Response Header Test Cases:\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"\r",
									"//***********************************************************************************************************/\r",
									"\r",
									"//***********************************************************************************************************/\r",
									"\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Booking_CheckPut_Updatesuccessfull_GetRequest]: Check Status code of get langauge request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Booking_CheckPut_Updatesuccessfull_GetRequest]: Check Status message of get langauge request is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[Booking_CheckPut_Updatesuccessfull_GetRequest]: Check if response Body is an object not array\", function () {\r",
									"    pm.expect(typeof pm.response.json()).to.equal(\"object\")\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//4-First Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"4.[Booking_CheckPut_Updatesuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"firstname\")\r",
									"})\r",
									"pm.test(\"5.[Booking_CheckPut_Updatesuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"lastname\")\r",
									"})\r",
									"pm.test(\"6.[Booking_CheckPut_Updatesuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"totalprice\")\r",
									"})\r",
									"pm.test(\"7.[Booking_CheckPut_Updatesuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"depositpaid\")\r",
									"})\r",
									"\r",
									"pm.test(\"9.[Booking_CheckPut_Updatesuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"bookingdates\")\r",
									"})\r",
									"pm.test(\"10.[Booking_CheckPut_Updatesuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates).to.have.property(\"checkin\")\r",
									"})\r",
									"pm.test(\"11.[Booking_CheckPut_Updatesuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates).to.have.property(\"checkout\")\r",
									"})\r",
									"pm.test(\"12.[Booking_CheckPut_Updatesuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"additionalneeds\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"// because the object and array contain properties\r",
									"\r",
									"pm.test(\"13.[Booking_CheckPut_Updatesuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).firstname).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"14.[Booking_CheckPut_Updatesuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).lastname).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"15.[Booking_CheckPut_Updatesuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).totalprice).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"16.[Booking_CheckPut_Updatesuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).depositpaid).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"17.[Booking_CheckPut_Updatesuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingid).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"18.[Booking_CheckPut_Updatesuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"19.[Booking_CheckPut_Updatesuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates.checkin).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"20.[Booking_CheckPut_Updatesuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates.checkout).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"21.[Booking_CheckPut_Updatesuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).additionalneeds).to.not.equal(null)\r",
									"})\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"22.[Booking_CheckPut_Updatesuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).firstname).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"23.[Booking_CheckPut_Updatesuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).lastname).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"24.[Booking_CheckPut_Updatesuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).totalprice).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"25.[Booking_CheckPut_Updatesuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).depositpaid).to.not.be.undefined;\r",
									"})\r",
									"\r",
									"pm.test(\"27.[Booking_CheckPut_Updatesuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"28.[Booking_CheckPut_Updatesuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates.checkin).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"29.[Booking_CheckPut_Updatesuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates.checkout).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"30.[Booking_CheckPut_Updatesuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).additionalneeds).to.not.be.undefined;\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"\r",
									"\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"// pm.test(\"31.Check the response value of ID has value as expected\", function () {\r",
									"//     console.log(JSON.parse(responseBody).id)\r",
									"//     pm.expect(JSON.parse(request.data).id).to.equal(JSON.parse(responseBody).id)\r",
									"// })\r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-Check length of all attributes at Response body not less than 5 digit\r",
									"//************************************************************************************************************/\r",
									"// 10-Header Request test cases\r",
									"//************************************************************************************************************/\r",
									"// 11-Header Response test cases\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseurl}}/booking/{{Bookingid}}"
					},
					"response": []
				},
				{
					"name": "6 - PartialUpdateBooking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key: 'Cookie',\r",
									"    value: 'token=' + pm.collectionVariables.get('TokenNumber')\r",
									"    // value: 'token= 06cadcf2b90101e'\r",
									"});\r",
									"console.log(pm.collectionVariables.get('TokenNumber'))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"//7.Check all response values have expected data type\r",
									"//8.Check The values as expected \r",
									"//9. Business test case :Check length of all attributes at Response body not less than 5 digit\r",
									"//10-Request Header Test Cases\r",
									"//11-Response Header Test Cases:\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"\r",
									"//***********************************************************************************************************/\r",
									"\r",
									"//***********************************************************************************************************/\r",
									"\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Booking_PartialUpdateBooking_PatchRequest]: Check Status code of get langauge request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Booking_PartialUpdateBooking_PatchRequest]: Check Status message of get langauge request is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[Booking_PartialUpdateBooking_PatchRequest]: Check if response Body is an object not array\", function () {\r",
									"    pm.expect(typeof pm.response.json()).to.equal(\"object\")\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//4-First Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"4.[Booking_PartialUpdateBooking_PatchRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"firstname\")\r",
									"})\r",
									"pm.test(\"5.[Booking_PartialUpdateBooking_PatchRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"lastname\")\r",
									"})\r",
									"pm.test(\"6.[Booking_PartialUpdateBooking_PatchRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"totalprice\")\r",
									"})\r",
									"pm.test(\"7.[Booking_PartialUpdateBooking_PatchRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"depositpaid\")\r",
									"})\r",
									"\r",
									"pm.test(\"9.[Booking_PartialUpdateBooking_PatchRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"bookingdates\")\r",
									"})\r",
									"pm.test(\"10.[Booking_PartialUpdateBooking_PatchRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates).to.have.property(\"checkin\")\r",
									"})\r",
									"pm.test(\"11.[Booking_PartialUpdateBooking_PatchRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates).to.have.property(\"checkout\")\r",
									"})\r",
									"pm.test(\"12.[Booking_PartialUpdateBooking_PatchRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"additionalneeds\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"// because the object and array contain properties\r",
									"\r",
									"pm.test(\"13.[Booking_PartialUpdateBooking_PatchRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).firstname).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"14.[Booking_PartialUpdateBooking_PatchRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).lastname).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"15.[Booking_PartialUpdateBooking_PatchRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).totalprice).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"16.[Booking_PartialUpdateBooking_PatchRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).depositpaid).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"17.[Booking_PartialUpdateBooking_PatchRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingid).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"18.[langauges_Get_Languages_Request]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"19.[Booking_PartialUpdateBooking_PatchRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates.checkin).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"20.[Booking_PartialUpdateBooking_PatchRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates.checkout).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"21.[Booking_PartialUpdateBooking_PatchRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).additionalneeds).to.not.equal(null)\r",
									"})\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"22.[Booking_PartialUpdateBooking_PatchRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).firstname).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"23.[Booking_PartialUpdateBooking_PatchRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).lastname).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"24.[Booking_PartialUpdateBooking_PatchRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).totalprice).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"25.[Booking_PartialUpdateBooking_PatchRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).depositpaid).to.not.be.undefined;\r",
									"})\r",
									"\r",
									"pm.test(\"27.[Booking_PartialUpdateBooking_PatchRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"28.[Booking_PartialUpdateBooking_PatchRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates.checkin).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"29.[Booking_PartialUpdateBooking_PatchRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates.checkout).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"30.[Booking_PartialUpdateBooking_PatchRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).additionalneeds).to.not.be.undefined;\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"\r",
									"\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"// pm.test(\"31.Check the response value of ID has value as expected\", function () {\r",
									"//     console.log(JSON.parse(responseBody).id)\r",
									"//     pm.expect(JSON.parse(request.data).id).to.equal(JSON.parse(responseBody).id)\r",
									"// })\r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-Check length of all attributes at Response body not less than 5 digit\r",
									"//************************************************************************************************************/\r",
									"// 10-Header Request test cases\r",
									"//************************************************************************************************************/\r",
									"// 11-Header Response test cases\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Ahmed\",\r\n    \"lastname\" : \"Ashraf\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/booking/{{Bookingid}}"
					},
					"response": []
				},
				{
					"name": "7 - Check Patch_Update successfull",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"//7.Check all response values have expected data type\r",
									"//8.Check The values as expected \r",
									"//9. Business test case :Check length of all attributes at Response body not less than 5 digit\r",
									"//10-Request Header Test Cases\r",
									"//11-Response Header Test Cases:\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"\r",
									"//***********************************************************************************************************/\r",
									"\r",
									"//***********************************************************************************************************/\r",
									"\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Booking_CheckPatch_UpdateSuccessfull_GetRequest]: Check Status code of get langauge request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Booking_CheckPatch_UpdateSuccessfull_GetRequest]: Check Status message of get langauge request is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[Booking_CheckPatch_UpdateSuccessfull_GetRequest]: Check if response Body is an object not array\", function () {\r",
									"    pm.expect(typeof pm.response.json()).to.equal(\"object\")\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//4-First Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"4.[Booking_CheckPatch_UpdateSuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"firstname\")\r",
									"})\r",
									"pm.test(\"5.[Booking_CheckPatch_UpdateSuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"lastname\")\r",
									"})\r",
									"pm.test(\"6.[Booking_CheckPatch_UpdateSuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"totalprice\")\r",
									"})\r",
									"pm.test(\"7.[Booking_CheckPatch_UpdateSuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"depositpaid\")\r",
									"})\r",
									"\r",
									"pm.test(\"9.[Booking_CheckPatch_UpdateSuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"bookingdates\")\r",
									"})\r",
									"pm.test(\"10.[Booking_CheckPatch_UpdateSuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates).to.have.property(\"checkin\")\r",
									"})\r",
									"pm.test(\"11.[Booking_CheckPatch_UpdateSuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates).to.have.property(\"checkout\")\r",
									"})\r",
									"pm.test(\"12.[langauges_Get_Languages_Request]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"additionalneeds\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"// because the object and array contain properties\r",
									"\r",
									"pm.test(\"13.[Booking_CheckPatch_UpdateSuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).firstname).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"14.[Booking_CheckPatch_UpdateSuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).lastname).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"15.[Booking_CheckPatch_UpdateSuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).totalprice).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"16.[Booking_CheckPatch_UpdateSuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).depositpaid).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"17.[Booking_CheckPatch_UpdateSuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingid).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"18.[Booking_CheckPatch_UpdateSuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"19.[Booking_CheckPatch_UpdateSuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates.checkin).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"20.[Booking_CheckPatch_UpdateSuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates.checkout).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"21.[Booking_CheckPatch_UpdateSuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).additionalneeds).to.not.equal(null)\r",
									"})\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"22.[Booking_CheckPatch_UpdateSuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).firstname).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"23.[Booking_CheckPatch_UpdateSuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).lastname).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"24.[Booking_CheckPatch_UpdateSuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).totalprice).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"25.[Booking_CheckPatch_UpdateSuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).depositpaid).to.not.be.undefined;\r",
									"})\r",
									"\r",
									"pm.test(\"27.[Booking_CheckPatch_UpdateSuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"28.[Booking_CheckPatch_UpdateSuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates.checkin).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"29.[Booking_CheckPatch_UpdateSuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates.checkout).to.not.be.undefined;\r",
									"})\r",
									"pm.test(\"30.[Booking_CheckPatch_UpdateSuccessfull_GetRequest]: Check response schema has property token\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).additionalneeds).to.not.be.undefined;\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"\r",
									"\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"// pm.test(\"31.Check the response value of ID has value as expected\", function () {\r",
									"//     console.log(JSON.parse(responseBody).id)\r",
									"//     pm.expect(JSON.parse(request.data).id).to.equal(JSON.parse(responseBody).id)\r",
									"// })\r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-Check length of all attributes at Response body not less than 5 digit\r",
									"//************************************************************************************************************/\r",
									"// 10-Header Request test cases\r",
									"//************************************************************************************************************/\r",
									"// 11-Header Response test cases\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseurl}}/booking/{{Bookingid}}"
					},
					"response": []
				},
				{
					"name": "8 - Delete Booking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key: 'Cookie',\r",
									"    value: 'token=' + pm.collectionVariables.get('TokenNumber')\r",
									"});\r",
									"console.log(pm.collectionVariables.get('TokenNumber'))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Booking_DeleteBooking_DeleteRequest]: Check Status code of get langauge request is 200\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Booking_DeleteBooking_DeleteRequest]: Check Status message of get langauge request is OK\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{baseurl}}/booking/{{Bookingid}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Ping",
			"item": [
				{
					"name": "1 - HealthCheck",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Ping_HealthCheck_GetRequest]: Check Status code of get langauge request is 200\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Ping_HealthCheck_GetRequest]: Check Status message of get langauge request is OK\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseurl}}/ping"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "username_random",
			"value": ""
		},
		{
			"key": "password_random",
			"value": ""
		},
		{
			"key": "FirstName",
			"value": ""
		},
		{
			"key": "LirstName",
			"value": ""
		},
		{
			"key": "checkin",
			"value": ""
		},
		{
			"key": "checkout",
			"value": ""
		},
		{
			"key": "Bookingid",
			"value": ""
		},
		{
			"key": "totalPrice",
			"value": ""
		},
		{
			"key": "depositpaid",
			"value": ""
		},
		{
			"key": "additionalneeds_meels",
			"value": ""
		},
		{
			"key": "TokenNumber",
			"value": ""
		},
		{
			"key": "newtoken",
			"value": ""
		},
		{
			"key": "oldtoken",
			"value": ""
		}
	]
}